package org.example.schema.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.schema.model.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

@Service
public class SchemaReader {
    private static final Logger logger = LoggerFactory.getLogger(SchemaReader.class);
    private final ObjectMapper objectMapper;
    private final ResourceLoader resourceLoader;
    private final Map<String, Schema> schemaCache = new HashMap<>();

    @Value("${schema.directory}")
    private String schemaDirectory;

    @Autowired
    public SchemaReader(ObjectMapper objectMapper, ResourceLoader resourceLoader) {
        this.objectMapper = objectMapper;
        this.resourceLoader = resourceLoader;
    }

    @PostConstruct
    public void init() {
        // Validate schema directory exists at startup
        Path directoryPath = Paths.get(schemaDirectory);
        if (!Files.exists(directoryPath)) {
            logger.warn("Schema directory does not exist: {}. Creating directory.", schemaDirectory);
            try {
                Files.createDirectories(directoryPath);
            } catch (IOException e) {
                logger.error("Failed to create schema directory: {}", schemaDirectory, e);
            }
        }

        // Pre-load sample schemas from classpath
        try {
            Resource apiSchema = resourceLoader.getResource("classpath:schemas/CustomerAPISchema.json");
            Resource dbSchema = resourceLoader.getResource("classpath:schemas/CustomerDBSchema.json");

            if (apiSchema.exists()) {
                Schema schema = loadSchemaFromResource(apiSchema);
                logger.info("Pre-loaded API schema: {}", schema.getSchemaName());
                schemaCache.put("CustomerAPISchema", schema);
            }

            if (dbSchema.exists()) {
                Schema schema = loadSchemaFromResource(dbSchema);
                logger.info("Pre-loaded DB schema: {}", schema.getSchemaName());
                schemaCache.put("CustomerDBSchema", schema);
            }
        } catch (Exception e) {
            logger.warn("Could not pre-load schema files: {}", e.getMessage());
        }
    }

    private Schema loadSchemaFromResource(Resource resource) throws IOException {
        String content = new String(resource.getInputStream().readAllBytes());
        return objectMapper.readValue(content, Schema.class);
    }

    /**
     * Reads a schema file and returns a Schema object
     * @param schemaPath Path to the schema file
     * @return Schema object
     */
    public Schema readSchema(String schemaPath) {
        if (schemaCache.containsKey(schemaPath)) {
            logger.info("Returning cached schema for {}", schemaPath);
            return schemaCache.get(schemaPath);
        }

        // Try to load by schema name directly from cache
        Path path = Paths.get(schemaPath);
        String fileName = path.getFileName().toString();
        String schemaName = fileName.replace(".json", "");

        if (schemaCache.containsKey(schemaName)) {
            logger.info("Returning cached schema by name: {}", schemaName);
            return schemaCache.get(schemaName);
        }

        try {
            if (!Files.exists(path)) {
                // Try looking for the schema in classpath resources as a fallback
                Resource resource = resourceLoader.getResource("classpath:schemas/" + fileName);

                if (resource.exists()) {
                    logger.info("Schema file not found at {}, using classpath resource instead", schemaPath);
                    Schema schema = loadSchemaFromResource(resource);
                    schemaCache.put(schemaPath, schema);
                    schemaCache.put(schemaName, schema);
                    return schema;
                } else {
                    throw new IOException("Schema file not found at " + schemaPath + " and no default schema available");
                }
            }

            String content = Files.readString(path);
            Schema schema = objectMapper.readValue(content, Schema.class);
            schemaCache.put(schemaPath, schema);
            schemaCache.put(schemaName, schema);
            logger.info("Successfully loaded schema: {}", schema.getSchemaName());
            return schema;
        } catch (IOException e) {
            logger.error("Error reading schema file: {}", schemaPath, e);
            throw new RuntimeException("Failed to read schema file: " + schemaPath, e);
        }
    }

    /**
     * Reads a schema from a Spring Resource
     * @param resource Resource containing schema JSON
     * @return Schema object
     * @throws IOException if resource cannot be read
     */
    public Schema readSchemaFromResource(Resource resource) throws IOException {
        String schemaName = resource.getFilename().replace(".json", "");

        if (schemaCache.containsKey(schemaName)) {
            logger.info("Returning cached schema by name: {}", schemaName);
            return schemaCache.get(schemaName);
        }

        Schema schema = loadSchemaFromResource(resource);
        schemaCache.put(schemaName, schema);
        logger.info("Successfully loaded schema from resource: {}", schema.getSchemaName());
        return schema;
    }

    /**
     * Checks if a schema is cached by name
     * @param schemaName Name of the schema
     * @return true if schema is in cache
     */
    public boolean isCached(String schemaName) {
        return schemaCache.containsKey(schemaName);
    }

    /**
     * Gets a schema from cache by name
     * @param schemaName Name of the schema
     * @return Schema object or null if not in cache
     */
    public Schema getFromCache(String schemaName) {
        return schemaCache.get(schemaName);
    }

    /**
     * Determines if the schema is an API schema
     * @param schema Schema to check
     * @return true if API schema, false otherwise
     */
    public boolean isApiSchema(Schema schema) {
        return schema.getSource() != null &&
                "api".equalsIgnoreCase(schema.getSource().getDataSourceType());
    }

    /**
     * Determines if the schema is a DB schema
     * @param schema Schema to check
     * @return true if DB schema, false otherwise
     */
    public boolean isDbSchema(Schema schema) {
        return schema.getSource() != null &&
                "Database".equalsIgnoreCase(schema.getSource().getDataSourceType());
    }

    /**
     * Clears the schema cache
     */
    public void clearCache() {
        schemaCache.clear();
        logger.info("Schema cache cleared");
    }
}
